@model Education.Areas.Admin.Data.DataModel.BlogModel

@{
    ViewBag.Title = "Edit";
}


<div class="page-header">
    <div class="row align-items-center">
        <div class="col">
            <h3 class="page-title">Edit Blog</h3>
            <ul class="breadcrumb">
                <li class="breadcrumb-item">@Html.ActionLink("Blogs", "Index")</li>
                <li class="breadcrumb-item active">Edit Blog</li>
            </ul>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-sm-12">
        <div class="card">
            <div class="card-body">
                @using (Html.BeginForm("Edit", "Blogs", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="row">
                        <div class="col-12 col-sm-9">
                            <div class="form-group">
                                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label " })
                                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-12 col-sm-3">
                            <div class="form-group">
                                <label for="CategoryId" class="control-label">Category Name</label>
                                <div class="d-flex">
                                    @Html.DropDownList("CategoryId", ViewBag.CategoryId as SelectList, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
                                    <a href="@Url.Action("Create","Categories")" class="btn btn-primary ml-1"><i class="fas fa-plus"></i></a>
                                </div>

                            </div>
                        </div>
                        <div class="col-12 col-sm-12">
                            <div class="form-group">
                                @Html.LabelFor(model => model.Slug, htmlAttributes: new { @class = "control-label" })
                                @Html.EditorFor(model => model.Slug, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Slug, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-12 col-sm-12">
                            <div class="form-group">
                                @Html.LabelFor(model => model.Detail, htmlAttributes: new { @class = "control-label " })
                                @Html.EditorFor(model => model.Detail, new { htmlAttributes = new { @class = "form-control editor" } })
                                @Html.ValidationMessageFor(model => model.Detail, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-12 col-sm-12">
                            <div class="form-group">
                                @Html.LabelFor(model => model.Sumary, htmlAttributes: new { @class = "control-label " })
                                @Html.TextAreaFor(model => model.Sumary, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Sumary, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-12 col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.Tag, htmlAttributes: new { @class = "control-label " })
                                @Html.TextAreaFor(model => model.Tag, new { @class = "form-control" })
                                <small>Separate tags with a comma (,).</small>
                                @Html.ValidationMessageFor(model => model.Tag, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-12 col-sm-6">
                            <div class="form-group">
                                @Html.LabelFor(model => model.Image, htmlAttributes: new { @class = "control-label " })
                                <input type="file" name="Image" class="form-control image" />
                                <img src="@ViewBag.Image" style="width:45px" alt="Blog image" />
                            </div>
                        </div>

                        <div class="col-12">
                            <button type="submit" class="btn btn-primary">Submit</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
@section pluginjs{
    <script src="~/Areas/Admin/Content/assets/plugins/ckeditor/ckeditor.js"></script>
    <script src="~/Areas/Admin/Content/assets/js/autoSlug.js"></script>
}
@section scripts{
    <script>
        function readURL(input) {

            if (input.files && input.files[0]) {
                var reader = new FileReader();

                reader.onload = function (e) {
                    $(input).next('img').attr('src', e.target.result);
                }

                reader.readAsDataURL(input.files[0]);
            }
        }

        $(".image").change(function () {
            readURL(this);
        });
        ClassicEditor
            .create(document.querySelector('.editor'), {
                ckfinder: {
                    uploadUrl: '/ckfinder/connector?command=QuickUpload&type=Files&responseType=json'
                },
                toolbar: ['ckfinder', 'imageUpload', '|', 'heading', '|', 'bold', 'italic', '|', 'undo', 'redo']
            })
            .catch(function (error) {
                console.error(error);
            });

    </script>
}